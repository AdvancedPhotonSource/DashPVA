[metadata]
width=2048
height=2048
qxrdVersion=0.11.10.16
qtVersion=5.13.0
dataType=5
dataTypeName=Subtracted Data
fileBase=d350_CeO2-000000.tif
fileName=F:/data/2022-3/HoffmanOct2022/d350_CeO2-000000.tif
title=d350_CeO2-000000.tif
readoutMode=0
exposureTime=0.1
summedExposures=50
imageSequenceNumber=1325
imageNumber=0
phaseNumber=0
nPhases=1
dateTime=@DateTime(\0\0\0\x10\0\0\0\0\0\0%\x88\xdf\x2uNF\0)
dateString=2022.10.18 : 11:27:22.182
timeStamp=1666110442.162
hBinning=1
vBinning=1
cameraGain=1
triggered=1
userComment1=
userComment2=
userComment3=
userComment4=
imageSaved=1
normalization=@Variant(\0\0\0\x7f\0\0\0\xfQcepDoubleList\0\0\0\0\0)
normalization\size=0
extraInputs=@Variant(\0\0\0\x7f\0\0\0\xfQcepDoubleList\0\0\0\0\0)
extraInputs\size=0
used=true
minimumValue=0
maximumValue=3276750
AttenuatorsIn=0
BeamstopPos=350.0000
Distance=350.0000
Filter=2
HutchrelativeHumidity=0%
Hutchtemp=0 C
Polarization=0.99
Temperature=0.0000
Wavelength=0.21160
file_index=0
i00=10809

[normalization]
size=0

[centerfinder]
centerX=1012
centerY=1000
centerStep=0.5
detectorXPixelSize=200
detectorYPixelSize=200
detectorDistance=1962.1
detectorDistanceStep=100
energy=86720
implementTilt=true
detectorTilt=-0.446
detectorTiltStep=0.1
tiltPlaneRotation=287.35
tiltPlaneRotationStep=10
markedPoints=@Variant(\0\0\0\x7f\0\0\0\x16QxrdPowderPointVector\0\0\0\0\0)
markedPoints\size=0
fittedRings=@Variant(\0\0\0\x7f\0\0\0\x16QxrdPowderPointVector\0\0\0\0\0)
fittedRings\size=0
calibrantName=NAC
calibrantLattice=10.251437
calibrantLatticeLimit=5
calibrantSymmetry=1
calibrantDSpacings=@Variant(\0\0\0\x7f\0\0\0\x16QxrdPowderPointVector\0\0\0\0\0)
calibrantDSpacings\size=0
ringRadius=0
ringRadiusA=0
ringRadiusB=0
ringRotation=0
peakFitRadius=10
peakHeight=100
peakCenterX=0
peakCenterY=0
peakWidth=2
peakBackground=0
peakBackgroundX=0
peakBackgroundY=0
peakFitDebug=false
peakFitIterations=200
ringAngles=@Variant(\0\0\0\x7f\0\0\0\x11QcepDoubleVector\0\0\0\0\0)
ringAngles\size=0
ringAngleTolerance=0.1
powderFitOptions=0
ringIndex=0
subtractRingAverages=false
ringAverageDisplacement=0
fittedWidthMin=0.5
fittedWidthMax=3
fittedHeightMinRatio=0.25
fittedPositionMaxDistance=2

[integrator]
oversample=1
integrationStep=0.003
integrationNSteps=0
integrationMinimum=0.1
integrationMaximum=8
integrationXUnits=0
enableGeometricCorrections=false
enablePolarizationCorrections=false
polarization=0.99
enableAbsorptionCorrections=false
attenuationLength=0
enableUserGeometry=0
userGeometryScript="/*\n  This file gives an example user geometry function.\n\n  The value of 'centering.enableUserGeometry' determines hoe the geometry\n  function will be called:\n\n  0:  No user geometry function\n  1:  Called with detector pixel coordinates as arguments\n\n  The function should return a radial distance value which represents\n  the bin number that the pixel should map into,  If you want a pixel to\n  be ignored you can return a NaN value.\n  */\n\nfunction userGeometry(i, j) {\n  /* this example implements an untilted detector, with hte\n    beam center at (1234,2076)\n    */\n\n  return Math.sqrt(Math.pow(i-1234,2) + Math.pow(j-2076,2));\n}\n"
userGeometryFunction=userGeometry
enableUserAbsorption=0
userAbsorptionScript="/*\n  This file contains some example user absorption functions.\n\n  The value of 'centering.enableUserAbsorption' determines how the absorption\n  function will be called:\n\n  0:   No user defined absorption\n  1:   Called with detector pixel coordinate as arguments (ignores tilt correction)\n  2:   Called with x,y displacement from beam center at detector plane (uses tilt correction)\n  3:   Called with r,chi as arguments (uses tilt correction)\n  4:   Called with q,chi as arguments (uses tilt correction)\n\n  The value returned by the function will be used to multiply the image intensity\n\n\n  */\n\nfunction userAbsorb1(i,j) {\n  /* As a function of pixel coordinates */\n  /* this example implements a 500 pixel radius circle, centered at (1234,2076) */\n\n  var rad = Math.sqrt(Math.pow(i-1234,2) + Math.pow(j-2076,2));\n\n  if (rad > 500) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n\nfunction userAbsorb2(x,y) {\n  /* As a function of x,y displacement from detector center */\n  /* this example implements a 50mm radius circle */\n\n  var rad = Math.sqrt(Math.pow(x,2) + Math.pow(y,2));\n\n  if (rad > 50) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n\nfunction userAbsorb3(r,chi) {\n  /* as a function of r,chi - again a 50mm circle */\n\n  if (r > 50) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n\nfunction userAbsorb4(q, chi) {\n  /* as a function of q,chi */\n\n  if (q > 0.1) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n"
userAbsorptionFunction=userAbsorb1
scalingFactor=1
minCutOffValue=-inf
minCutOffEnable=false
maxCutOffValue=inf
maxCutOffEnable=false
